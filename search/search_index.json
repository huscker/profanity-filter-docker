{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Profanity filter Project documentation on profanity filter service. Profanity filter is a fast and modular service for filtering out profane words. It is a valuable tool for any application or platform that wants to maintain a positive and professional image. By quickly and effectively filtering out profane language, you can create a safe and welcoming space for users. Features API The profanity filter service offers an API that allows developers to easily integrate the filtering feature into their applications. Administration-panel The profanity filter also comes with an administration panel that allows administrators to manage the list of profane words, add new words, and customize the filter settings. Extendable list of filtering backends The profanity filter service offers an extendable list of filtering backends, allowing you to choose the most suitable method for your application. Currently supported backends: - profanity_filter","title":"Home"},{"location":"#profanity-filter","text":"Project documentation on profanity filter service. Profanity filter is a fast and modular service for filtering out profane words. It is a valuable tool for any application or platform that wants to maintain a positive and professional image. By quickly and effectively filtering out profane language, you can create a safe and welcoming space for users.","title":"Profanity filter"},{"location":"#features","text":"","title":"Features"},{"location":"#api","text":"The profanity filter service offers an API that allows developers to easily integrate the filtering feature into their applications.","title":"API"},{"location":"#administration-panel","text":"The profanity filter also comes with an administration panel that allows administrators to manage the list of profane words, add new words, and customize the filter settings.","title":"Administration-panel"},{"location":"#extendable-list-of-filtering-backends","text":"The profanity filter service offers an extendable list of filtering backends, allowing you to choose the most suitable method for your application. Currently supported backends: - profanity_filter","title":"Extendable list of filtering backends"},{"location":"developer-guide/adding-providers/","text":"Extending service functionality Adding new providers Introduction This documentation describes the process of adding a new profanity filtering provider to the system. The implementation is based on creating a class that inherits from FilteringProvider and integrating it into ProviderManager. Steps to Add a New Provider Define the Provider Class Create a new class that will inherit from FilteringProvider. Be sure to implement the abstract methods _censor_text and _reload_word_list. Example: from dataclasses import dataclass from your_library import YourBackend # Import the necessary backend @dataclass class YourFilterProvider(FilteringProvider): backend = YourBackend() async def _censor_text(self, text: str) -> str: # Logic for text filtering return self.backend.censor(text) async def _reload_word_list(self, words: list[str]): # Update the list of profanity words self.backend.update_word_list(words) Add Provider Settings If necessary, add settings for your new provider. To do this, create a settings class that inherits from ProviderSettings or a similar class if one exists. Example: from service.filtering.models import BaseProviderSettings class YourFilterProviderSettings(BaseProviderSettings): # Add the necessary fields pass Register the Provider in the Manager Add the new provider to the ProviderManager class. Update the get_provider method to return an instance of your new provider when requested. Example: from service.filtering.providers.your_filter import YourFilterProvider class ProviderManager: # ... async def get_provider(self, provider_type: ProviderTypes) -> FilteringProvider: match provider_type: # ... case ProviderTypes.YOUR_FILTER_PROVIDER: config = await YourFilterProviderSettings.get_solo() return YourFilterProvider( # Pass the necessary configuration parameters ) Update the Provider Types Enumeration Don\u2019t forget to add the new provider type to ProviderTypes so that your system can recognize it. class ProviderTypes(str, Enum): # ... YOUR_FILTER_PROVIDER = \"YOUR_FILTER_PROVIDER\"","title":"Extending functionality"},{"location":"developer-guide/adding-providers/#extending-service-functionality","text":"","title":"Extending service functionality"},{"location":"developer-guide/adding-providers/#adding-new-providers","text":"","title":"Adding new providers"},{"location":"developer-guide/adding-providers/#introduction","text":"This documentation describes the process of adding a new profanity filtering provider to the system. The implementation is based on creating a class that inherits from FilteringProvider and integrating it into ProviderManager. Steps to Add a New Provider","title":"Introduction"},{"location":"developer-guide/adding-providers/#define-the-provider-class","text":"Create a new class that will inherit from FilteringProvider. Be sure to implement the abstract methods _censor_text and _reload_word_list. Example: from dataclasses import dataclass from your_library import YourBackend # Import the necessary backend @dataclass class YourFilterProvider(FilteringProvider): backend = YourBackend() async def _censor_text(self, text: str) -> str: # Logic for text filtering return self.backend.censor(text) async def _reload_word_list(self, words: list[str]): # Update the list of profanity words self.backend.update_word_list(words)","title":"Define the Provider Class"},{"location":"developer-guide/adding-providers/#add-provider-settings","text":"If necessary, add settings for your new provider. To do this, create a settings class that inherits from ProviderSettings or a similar class if one exists. Example: from service.filtering.models import BaseProviderSettings class YourFilterProviderSettings(BaseProviderSettings): # Add the necessary fields pass","title":"Add Provider Settings"},{"location":"developer-guide/adding-providers/#register-the-provider-in-the-manager","text":"Add the new provider to the ProviderManager class. Update the get_provider method to return an instance of your new provider when requested. Example: from service.filtering.providers.your_filter import YourFilterProvider class ProviderManager: # ... async def get_provider(self, provider_type: ProviderTypes) -> FilteringProvider: match provider_type: # ... case ProviderTypes.YOUR_FILTER_PROVIDER: config = await YourFilterProviderSettings.get_solo() return YourFilterProvider( # Pass the necessary configuration parameters )","title":"Register the Provider in the Manager"},{"location":"developer-guide/adding-providers/#update-the-provider-types-enumeration","text":"Don\u2019t forget to add the new provider type to ProviderTypes so that your system can recognize it. class ProviderTypes(str, Enum): # ... YOUR_FILTER_PROVIDER = \"YOUR_FILTER_PROVIDER\"","title":"Update the Provider Types Enumeration"},{"location":"developer-guide/installation/","text":"Installation From source Make sure you have Python v3.10 and poetry v 1.8.0+ installed. 1. Install dependencies poetry install --no-root poetry shell spacy download en Configure service cat .env.template > .env vim .env Run service poetry run uvicorn service.__main__:app --host 0.0.0.0 --port 8000 --log-level info Using devbox Prepare devbox environment devbox install Install project dependencies devbox run install Start services devbox services up Migrate database devbox run migrate Launch service devbox run web","title":"Installation"},{"location":"developer-guide/installation/#installation","text":"","title":"Installation"},{"location":"developer-guide/installation/#from-source","text":"Make sure you have Python v3.10 and poetry v 1.8.0+ installed. 1. Install dependencies poetry install --no-root poetry shell spacy download en Configure service cat .env.template > .env vim .env Run service poetry run uvicorn service.__main__:app --host 0.0.0.0 --port 8000 --log-level info","title":"From source"},{"location":"developer-guide/installation/#using-devbox","text":"Prepare devbox environment devbox install Install project dependencies devbox run install Start services devbox services up Migrate database devbox run migrate Launch service devbox run web","title":"Using devbox"},{"location":"user-guide/installation/","text":"Installation Docker compose Configure service cat .env.template > .env vim .env Run bundle docker compose up -d Helm Add charts repo helm repo add profanity-filter-charts https://huscker.github.io/profanity-filter-charts/ Install chart helm install profanity-filter profanity-filter-charts/profanity-filter --version 1.0.0","title":"Installation"},{"location":"user-guide/installation/#installation","text":"","title":"Installation"},{"location":"user-guide/installation/#docker-compose","text":"Configure service cat .env.template > .env vim .env Run bundle docker compose up -d","title":"Docker compose"},{"location":"user-guide/installation/#helm","text":"Add charts repo helm repo add profanity-filter-charts https://huscker.github.io/profanity-filter-charts/ Install chart helm install profanity-filter profanity-filter-charts/profanity-filter --version 1.0.0","title":"Helm"}]}